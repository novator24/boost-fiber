[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:conditions Condition Variables]

[heading Synopsis]

        enum class cv_status;
        {
            no_timeout,
            timeout
        };

        class condition_variable;
        class condition_variable_any;

The class `condition_variable` provides a mechanism for one fiber to wait for
notification `condition_variable`. When the fiber is woken from the wait, then
it checks to see if the appropriate condition is now true, and continues if so.
If the condition is not true, then the fiber then calls `wait` again to resume
waiting. In the simplest case, this condition is just a boolean variable:

    boost::fibers::condition_variable cond;
    boost::fibers::mutex mtx;
    bool data_ready;

    void process_data();

    void wait_for_data_to_process()
    {
        boost::unique_lock< boost::fibers::mutex > lk( mtx);
        while ( ! data_ready)
        {
            cond.wait( lk);
        }
        process_data();
    }

Notice that the `lk` is passed to `wait`: `wait` will atomically add the fiber
to the set of fibers waiting on the condition variable, and unlock the mutex.
When the fiber is woken, the mutex will be locked again before the call to
`wait` returns. This allows other fibers to acquire the mutex in order to
update the shared data, and ensures that the data associated with the condition
is correctly synchronized.

In the mean time, another fiber sets the condition to `true`, and then calls
either `notify_one` or `notify_all` on the condition variable to wake one
waiting fiber or all the waiting fibers respectively.

    void retrieve_data();
    void prepare_data();

    void prepare_data_for_processing()
    {
        retrieve_data();
        prepare_data();
        {
            boost::lock_guard< boost::fibers::mutex > lk( mtx);
            data_ready = true;
        }
        cond.notify_one();
    }

Note that the same mutex is locked before the shared data is updated, but that
the mutex does not have to be locked across the call to `notify_one`.

[section:condition Class `condition`]

    #include <boost/fiber/condition.hpp>

    enum cv_status
    {
        no_timeout = 1,
        timeout
    };

    class condition_variable
    {
    public:
        condition_variable();
        ~condition_variable();

        condition_variable( condition_variable const&) = delete;
        condition_variable & operator=( condition_variable const&) = delete;

        void notify_one();
        void notify_all();

        template< typename LockType >
        void wait( LockType & lk);

        template< typename LockType, typename Pred >
        void wait( LockType & lk, Pred predicate);

        template< typename LockType >
        cv_status wait_until( LockType & lt, clock_type::time_point const& timeout_time);

        template< typename LockType, typename Pred >
        bool wait_until( LockType & lt, clock_type::time_point const& timeout_time, Pred pred);

        template< typename LockType, typename Rep, typename Period >
        cv_status wait_for( LockType & lt, chrono::duration< Rep, Period > const& timeout_duration);

        template< typename LockType, typename Rep, typename Period, typename Pred >
        bool wait_for( LockType & lt, chrono::duration< Rep, Period > const& timeout_duration, Pred pred);
    };

    typedef condition_variable condition_variable_any;

[section:constructor Constructor]

        condition_variable()

[variablelist
[[Effects:] [Creates the object.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:destructor Destructor]

        ~condition_variable()

[variablelist
[[Precondition:] [All fibers waiting on `*this` have been notified by a call to
`notify_one` or `notify_all` (though the respective calls to `wait`, `wait_for` or
`wait_until` need not have returned).]]
[[Effects:] [Destroys the object.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:notify_one Member function `notify_one()`]

        void notify_one();

[variablelist
[[Effects:] [If any fibers are currently __blocked__ waiting on `*this` in a
call to `wait`, `wait_for` or `wait_until`, unblocks one of those fibers.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:notify_all Member function `notify_all()`]

        void notify_all();

[variablelist
[[Effects:] [If any fibers are currently __blocked__ waiting on `*this` in a
call to `wait`, `wait_for` or `wait_until`, unblocks all of those fibers.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section:wait Templated member function `wait()`]

        template< typename LockType >
        void wait( LockType & lk);

        template< typename LockType, typename Pred >
        void wait( LockType & lt, Pred pred);

[variablelist
[[Precondition:] [`lk` is locked by the current fiber, and either no other
fiber is currently waiting on `*this`, or the execution of the `mutex()`
member function on the `lk` objects supplied in the calls to `wait` in all the
fibers currently waiting on `*this` would return the same value as
`lk->mutex()` for this call to `wait`.]]
[[Effects:] [Atomically call `lk.unlock()` and blocks the current fiber. The
fiber will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, or spuriously. When the fiber is unblocked (for whatever
reason), the lock is reacquired by invoking `lk.lock()` before the call to
`wait` returns. The lock is also reacquired by invoking `lk.lock()` if the
function exits with an exception.
Member function using `pred` as-if ``
while ( ! pred())
{
    wait( lk);
}
``]]
[[Postcondition:] [`lk` is locked by the current fiber.]]
[[Throws:] [__fiber_exception__ if an error
occurs. __fiber_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __fiber__ object associated with the current fiber of
execution.]]
]
[endsect]


[section:wait_until Templated member function `wait_until()`]

        template< typename LockType >
        cv_status wait_until( LockType & lt, clock_type::time_point const& timeout_time);

        template< typename LockType, typename Pred >
        bool wait_until( LockType & lt, clock_type::time_point const& timeout_time, Pred pred);

[variablelist
[[Precondition:] [`lk` is locked by the current fiber, and either no other
fiber is currently waiting on `*this`, or the execution of the `mutex()` member
function on the `lk` objects supplied in the calls to `wait`, `wait_for` or `wait_until`
in all the fibers currently waiting on `*this` would return the same value as
`lk->mutex()` for this call to `wait`.]]
[[Effects:] [Atomically call `lk.unlock()` and blocks the current fiber. The
fiber will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, when the time as reported by `clock_type::now()`
would be equal to or later than the specified `timeout_time`, or spuriously. When
the fiber is unblocked (for whatever reason), the lock is reacquired by
invoking `lk.lock()` before the call to `wait` returns. The lock is also
reacquired by invoking `lk.lock()` if the function exits with an exception.
Member function using `pred` as-if ``
while ( ! pred() )
{
    if ( cv_status::timeout == wait_until( lt, timeout_time) )
        return pred();
}
return true;
``]]
[[Postcondition:] [`lk` is locked by the current fiber.]]
[[Throws:] [__fiber_exception__ if an error
occurs. __fiber_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __fiber__ object associated with the current fiber of
execution.]]
[[Returns:] [`false` if the call is returning because the time specified by
`timeout_time` was reached, `true` otherwise.]]
[[Postcondition:] [`lk` is locked by the current fiber.]]
[[Throws:] []]
]
[endsect]


[section:wait_for Templated member function `wait_for()`]

        template< typename LockType, typename Rep, typename Period >
        cv_status wait_for( LockType & lt, chrono::duration< Rep, Period > const& timeout_duration);

        template< typename LockType, typename Rep, typename Period, typename Pred >
        bool wait_for( LockType & lt, chrono::duration< Rep, Period > const& timeout_duration, Pred pred);

[variablelist
[[Precondition:] [`lk` is locked by the current fiber, and either no other
fiber is currently waiting on `*this`, or the execution of the `mutex()` member
function on the `lk` objects supplied in the calls to `wait`, `wait_for` or `wait_until`
in all the fibers currently waiting on `*this` would return the same value as
`lk->mutex()` for this call to `wait`.]]
[[Effects:] [Atomically call `lk.unlock()` and blocks the current fiber. The
fiber will unblock when notified by a call to `this->notify_one()` or
`this->notify_all()`, when the time as reported by `clock_type::now() + timeout_duration()`
would be equal to or later than the specified time point, or spuriously. When
the fiber is unblocked (for whatever reason), the lock is reacquired by
invoking `lk.lock()` before the call to `wait` returns. The lock is also
reacquired by invoking `lk.lock()` if the function exits with an exception.
Member function using `pred` as-if ``
while ( ! pred() )
{
    if ( cv_status::timeout == wait_for( lt, timeout_duration) )
        return pred();
}
return true;
``]]
[[Postcondition:] [`lk` is locked by the current fiber.]]
[[Throws:] [__fiber_exception__ if an error
occurs. __fiber_interrupted__ if the wait was interrupted by a call to
__interrupt__ on the __fiber__ object associated with the current fiber of
execution.]]
[[Returns:] [`false` if the call is returning because the time specified by
`timeout_time` was reached, `true` otherwise.]]
[[Postcondition:] [`lk` is locked by the current fiber.]]
[[Throws:] []]
]
[endsect]

[endsect]

[endsect]
