[/
  (C) Copyright 2007-8 Anthony Williams.
  (C) Copyright 2011-12 Vicente J. Botet Escriba.
  (C) Copyright 2013 Oliver Kowalke.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:fiber_mgmt Fiber management]

[section:synopsis Synopsis]

        #include <boost/fiber/all.hpp>

        namespace boost {
        namespace fibers {

        class fiber;
        bool operator<( fiber const& l, fiber const& r) noexcept;
        void swap( fiber & l, fiber & r) noexcept;

        class fiber_group;
        class attributes;

        struct algorithm;
        class round_robin;
        algorithm * set_scheduling_algorithm( algorithm * al)

        }

        namespace this_fiber {

        fibers::id get_id() noexcept;
        void yield();
        void sleep_until( fibers::clock_type::time_point const& timeout_point);
        template< typename Rep, typename Period >
        void sleep_for( fibers::clock_type::duration< Rep, Period > const& timeout_duration); 

        void interruption_point();
        bool interruption_requested() noexcept;
        bool interruption_enabled() noexcept;
        class disable_interruption;
        class restore_interruption;

        }}

[endsect] [/ section Synopsis]


[section:tutorial Tutorial]

Each __fiber__ represents a micro-thread which will be launched and managed
cooperativly by a scheduler. Objects of type __fiber__ are only moveable.

        boost::fibers::fiber f1; // not-a-fiber

        void f()
        {
            boost::fibers::fiber f2( some_fn);

            f1 = boost::move( f2); // f2 moved to f1
        }


[heading Launching]

[important Each thread must set once the fiber-scheduler before any __fiber__ construction.]

        boost::fibers::round_robin ds;
        boost::fibers::set_scheduling_algorithm( & ds);

        boost::fibers::fiber f1( some_fn);

A new fiber is launched by passing an object of a callable type that can be
invoked with no parameters.
If the object must not (or cannot) be copied, then ['boost::ref] can be used to
pass in a reference to the function object. In this case, the user must ensure
that the referred-to object outlives the newly-created fiber.

        struct callable
        { void operator()(); };

        boost::fibers::fiber copies_are_safe()
        {
            callable x;
            return boost::fibers::fiber( x);
        } // x is destroyed, but the newly-created fiber has a copy, so this is OK

        boost::fibers::fiber oops()
        {
            callable x;
            return boost::fibers::fiber( boost::ref( x) );
        } // x is destroyed, but the newly-created fiber still has a reference
          // this leads to undefined behaviour

The execution control is immediately transfered to the spawned __fiber__ at
construction. If the constructor returns the __fiber__ might be complete or the
fiber is waiting/sleeping.


[heading Exceptions]

Exceptions thrown by the function or callable object passed to the __fiber__
constructor are consumed by the framework (if it required to know which
exceptions was thrown use __future__ and __packaged_task__).


[heading Detaching]

A __fiber__ can be detached by explicitly invoking the __detach__ member
function. In this case, the fiber represents __not_a_fiber__.

        boost::fibers::fiber( some_fn).detach();


[heading Joining]

In order to wait for a fiber to finish, the __join__ member functions of the
__fiber__ object can be used. __join__ will block until the __fiber__ object
has completed.
If the __fiber__ has already completed, or the __fiber__ object represents
__not_a_fiber__, then __join__ returns immediately.

        void some_fn()
        { ... }

        boost::fibers::fiber f( some_fn);
        ...
        f.join();

If the fiber has already completed, then __join__ returns immediately and
the joined __fiber__ becomes __not_a_fiber__.


[heading Destruction]

When a __fiber__, representing a vailid execution context, is destroyed the
programm terminates if the fiber is __joinable__.

        {
            boost::fibers::fiber f( some_fn);
        } // std::terminate() will be called


[heading Interruption]

A vaild fiber can be interuppted by invoking the __interrupt__ member function.
When the fiber executes on of the specific __interruption_points__ with
interruption enabled, then a __fiber_interrupted__ exception will be thrown.
If not caught, the fiber will be terminated and the stack will be unwound, and
destructors of objects will be called.

With __disable_interruption__ a fiber can avoid to be interrupted.

        // interruption enabled at this point
        {
            boost::this_fiber::disable_interruptuion di1;
            // interruption disabled
            {
                boost::this::fiber::disable_interruption di2;
                // interruption still disabled
            } // di2 destructed; interruption state restored
            // interruption still disabled
        } // di destructed; interruption state restored
        // interruption enabled

At any point, the interruption state for the current thread can be queried by
calling __interruption_enabled__.
Following __interruption_points__ are defined and will throw
__fiber_interrupted__ if interruption is enabled.

* __join__
* __barrier_wait__
* __cond_wait__
* __cond_wait_for__
* __cond_wait_until__
* __barrier_wait__
* __sleep_for__
* __sleep_until__
* __interruption_point__


[heading Fiber IDs]

Objects of class __fiber_id__ can be used to identify fibers. Each running
__fiber__ has a unique __fiber_id__ obtainable from the corresponding __fiber__
by calling the __get_id__ member function.
Objects of class __fiber_id__ can be copied, and used as keys in associative
containers: the full range of comparison operators is provided.
They can also be written to an output stream using the stream insertion
operator, though the output format is unspecified.

Each instance of __fiber_id__ either refers to some fiber, or __not_a_fiber__.
Instances that refer to __not_a_fiber__ compare equal to each other, but
not equal to any instances that refer to an actual fiber. The comparison
operators on __fiber_id__ yield a total order for every non-equal __fiber_id__.

[endsect] [/ section Tutorial]


[section:fiber Class `fiber`]

        #include <boost/fiber/fiber.hpp>

        class fiber
        {
        public:
            typedef uspecified-class        id;

            fiber() noexcept;

            template< typename Fn >
            explicit fiber( Fn fn, attributes const& attr = attributes(),
                            stack_allocator const& stack_alloc = stack_allocator(),
                            std::allocator< fiber > const& alloc =
                                 std::allocator< fiber >() );

            template< typename Fn, typename StackAllocator >
            explicit fiber( Fn fn, attributes const& attr,
                            StackAllocator const& stack_alloc,
                            std::allocator< fiber > const& alloc =
                                 std::allocator< fiber >() );

            template< typename Fn, typename StackAllocator, typename Allocator >
            explicit fiber( Fn fn, attributes const& attr,
                            StackAllocator const& stack_alloc,
                            Allocator const& alloc);

            ~fiber();

            fiber( fiber const& other) = delete;

            fiber & operator=( fiber const& other) = delete;

            fiber( fiber && other) noexcept;

            fiber & operator=( fiber && other) noexcept;

            operator safe_bool() const noexcept;

            bool operator!() const noexcept;

            void swap( fiber & other) noexcept;

            bool joinable() const noexcept;

            id get_id() const noexcept;

            int priority() const noexcept;

            void priority( int) noexcept;

            void detach() noexcept;

            void join();

            void interrupt() noexcept;
        };

        bool operator<( fiber const& l, fiber const& r) noexcept;

        void swap( fiber & l, fiber & r) noexcept;


[section Default constructor]

        fiber() noexcept;

[variablelist
[[Effects:] [Constructs a __fiber__ instance that refers to __not_a_fiber__.]]
[[Postconditions:] [`this->get_id() == fiber::id()`]]
[[Throws:] [Nothing]]
]
[endsect]

[section Constructor]

        template< typename Fn >
        explicit fiber( Fn fn, attributes const& attr = attributes(),
                        stack_allocator const& stack_alloc = stack_allocator(),
                        std::allocator< fiber > const& alloc =
                             std::allocator< fiber >() );

        template< typename Fn, typename StackAllocator >
        explicit fiber( Fn fn, attributes const& attr,
                        StackAllocator const& stack_alloc,
                        std::allocator< fiber > const& alloc =
                             std::allocator< fiber >() );

        template< typename Fn, typename StackAllocator, typename Allocator >
        explicit fiber( Fn fn, attributes const& attr,
                        StackAllocator const& stack_alloc,
                        Allocator const& alloc);

[variablelist
[[Preconditions:] [`Fn` must by copyable or movable.]]
[[Effects:] [`fn` is copied into internal storage for access by the new fiber.]]
[[Postconditions:] [`*this` refers to the newly created fiber of execution.]]
[[Throws:] [__fiber_exception__ if an error occurs.]]
[[Note:] [StackAlloctor is required to allocate a stack for the internal
coroutine.]]
]
[endsect]

[section Copy constructor]

        fiber( fiber && other) noexcept;

[variablelist
[[Effects:] [Transfers ownership of the fiber managed by `other` to the newly
constructed __fiber__ instance.]]
[[Postconditions:] [`other.get_id() == fiber::id()` and `get_id()` returns the
value of `other.get_id()` prior to the construction]]
[[Throws:] [Nothing]]
]
[endsect]

[section Move assignment operator]

        fiber & operator=( fiber && other) noexcept;

[variablelist
[[Effects:] [Transfers ownership of the fiber managed by `other` (if any) to
`*this`.]]
[[Postconditions:] [`other->get_id() == fiber::id()` and `get_id()` returns the
value of `other.get_id()` prior to the assignment.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Destructor]

        ~fiber();

[variablelist
[[Effects:] [If the fiber is joinable calls to std::terminate. Destroys `*this`.]]
[[Throws:] [Nothing.]]
[[Note:] [The programmer must ensure that the destructor is never executed while
the fiber is still joinable.]]
]
[endsect]

[section Member function `joinable()`]

        bool joinable() const noexcept;

[variablelist
[[Returns:] [`true` if `*this` refers to a fiber of execution, `false`
otherwise.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `join()`]

        void join();

[variablelist
[[Preconditions:] [the fiber is joinable.]]
[[Effects:] [If `*this` refers to a fiber of execution, waits for that fiber to
complete.]]
[[Postconditions:] [If `*this` refers to a fiber of execution on entry, that
fiber has completed. `*this` no longer refers to any fiber of execution.]]
[[Throws:] [__fiber_interrupted__ if the current fiber is interrupted or
`system_error`]]
[[Error Conditions:] [
[*resource_deadlock_would_occur]: if `this->get_id() == boost::this_fiber::get_id()`.
[*invalid_argument]: if the fiber is not joinable.]]
[[Notes:] [`join()` is one of the predefined __interruption_points__.]]
]
[endsect]

[section Member function `detach()`]

        void detach();

[variablelist
[[Preconditions:] [the fiber is joinable.]]
[[Effects:] [The fiber of execution becomes detached, and no longer has an
associated __fiber__ object.]]
[[Postconditions:] [`*this` no longer refers to any fiber of execution.]]
[[Throws:] [`system_error`]]
[[Error Conditions:] [
[*invalid_argument]: if the fiber is not joinable.]]
]
[endsect]

[section Member function `get_id()`]

        fiber::id get_id() const noexcept;

[variablelist
[[Returns:] [If `*this` refers to a fiber of execution, an instance of
__fiber_id__ that represents that fiber. Otherwise returns a
default-constructed __fiber_id__.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `interrupt()`]

        void interrupt();

[variablelist
[[Effects:] [If `*this` refers to a fiber of execution, request that the fiber
will be interrupted the next time it enters one of the predefined
__interruption_points__ with interruption enabled, or if it is currently
__blocked__ in a call to one of the predefined __interruption_points__ with
interruption enabled .]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `priority( int)`]

        void priority( int) noexcept;

[variablelist
[[Effects:] [If `*this` refers to a fiber of execution, set its priority.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `priority()`]

        int priority() const noexcept;

[variablelist
[[Effects:] [If `*this` refers to a fiber of execution, return its priority.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `operator safe_bool()`]

        operator safe_bool() const noexcept;

[variablelist
[[Effects:] [Return `true` if `*this` refers to a fiber of execution, `false`
otherwise.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `operator!()`]

        bool operator!() const noexcept;

[variablelist
[[Effects:] [Return `true` if `*this` refers no to a fiber of execution, `false`
otherwise.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Member function `swap()`]

        void swap( fiber & other) noexcept;

[variablelist
[[Effects:] [Exchanges the fiber of execution associated with `*this` and
`other`, so `*this` is associated with the fiber associated with `other` prior
to the call, and vice-versa.]]
[[Postconditions:] [`this->get_id()` returns the same value as `other.get_id()`
prior to the call. `other.get_id()` returns the same value as `this->get_id()`
prior to the call.]]
[[Throws:] [Nothing]]
]
[endsect]

[section Non-member function `swap()`]

    void swap( fiber & l, fiber & r) noexcept;

[variablelist
[[Effects:] [Same as `l.swap( r)`.]]
]
[endsect]


[endsect] [/ section Class fiber]


[section:fiber_group Class `fiber_group`]

__fiber_group__ represents for a collection of fibers which can be waited on or interrupted.
__fiber_group__ is not copyable or movable. 

        #include <boost/fiber/fiber_group.hpp>

        class fiber_group
        {
        public:
            fiber_group() {}

            ~fiber_group();

            fiber_group( fiber_group const& other) = delete;

            fiber_group & operator=( fiber_group const& other) = delete;

            bool is_this_fiber_in();

            bool is_fiber_in( fiber * f);

            template< typename Fn >
            fiber * create_fiber( Fn fn, attributes attrs = attributes() );

            template< typename Fn, typename StackAllocator >
            fiber * create_fiber( Fn fn, attributes attrs,
                                  StackAllocator const& stack_alloc);

            template< typename Fn, typename StackAllocator, typename Allocator >
            fiber * create_fiber( Fn fn, attributes attrs,
                                  StackAllocator const& stack_alloc,
                                  Allocator const& alloc);

            void add_fiber( fiber * f);

            void remove_fiber( fiber * f);

            void join_all();

            void interrupt_all();

            std::size_t size() const;
        };

[section Constructor]

        fiber();

[variablelist
[[Effects:] [Create a new fiber group with no fibers.]]
]
[endsect]

[section Destructor]

        ~fiber();

[variablelist
[[Effects:] [Destroy `*this` and `delete` all __fiber__ objects in the group.]]
]
[endsect]

[section Member function `create_fiber()`]

        template< typename Fn >
        fiber * create_fiber( Fn fn, attributes attrs = attributes() );

        template< typename Fn, typename StackAllocator >
        fiber * create_fiber( Fn fn, attributes attrs,
                              StackAllocator const& stack_alloc);

        template< typename Fn, typename StackAllocator, typename Allocator >
        fiber * create_fiber( Fn fn, attributes attrs,
                              StackAllocator const& stack_alloc,
                              Allocator const& alloc);

[variablelist
[[Effects:] [Create a new __fiber__ object as-if by `new fiber( fn)` and add it
to the group.]]
[[Postcondition:] [`this->size()` is increased by one, the new fiber is running.]]
[[Returns:] [A pointer to the new __fiber__ object.]]
]
[endsect]

[section Member function `add_fiber()`]

        void add_fiber( fiber * f);

[variablelist
[[Precondition:] [The expression `delete f` is well-formed and will not result
in undefined behaviour and `is_fiber_in(thrd) == false`.]]
[[Effects:] [Take ownership of the __fiber__ object pointed to by `f` and add it
to the group.]]
[[Postcondition:] [`this->size()` is increased by one.]]
]
[endsect]

[section Member function `remove_fiber()`]

        void remove_fiber( fiber * f);

[variablelist
[[Effects:] [If `f` is a member of the group, remove it without calling
`delete`.]]
[[Postcondition:] [If `f` was a member of the group, `this->size()` is
decreased by one.]]
]
[endsect]

[section Member function `join_all()`]

        void join_all();

[variablelist
[[Requires:] [`is_this_fiber_in() == false`.]]
[[Effects:] [Call `join()` on each __fiber__ object in the group.]]
[[Postcondition:] [Every fiber in the group has terminated.]]
[[Note:] [Since __join__ is one of the predefined __interruption_points__,
`join_all()` is also an interruption point.]]
]
[endsect]

[section Member function `is_this_fiber_in()`]

        bool is_this_fiber_in();

[variablelist
[[Returns:] [true if there is a fiber `f` in the group such that
`f.get_id() == this_fiber::get_id()`.]]
]
[endsect]

[section Member function `is_fiber_in()`]

        bool is_fiber_in( fiber * f);

[variablelist
[[Returns:] [true if there is a fiber `fx` in the group such that
`fx.get_id() == f->get_id()`.]]
]
[endsect]

[section Member function `interrupt_all()`]

        void interrupt_all();

[variablelist
[[Effects:] [Call `interrupt()` on each __fiber__ object in the group.]]
]
[endsect]

[section Member function `size()`]

        int size();

[variablelist
[[Returns:] [The number of fibers in the group.]]
[[Throws:] [Nothing.]]
]
[endsect]


[endsect] [/ section Class fiber_group]


[section:attributes Class attributes]

Class `attributes` is used to transfers parameters required to setup a
fiber's context.

        #include <boost/fiber/attributes.hpp>

        struct attributes
        {
            std::size_t     size;
            flag_unwind_t   do_unwind;
            bool            preserve_fpu;

            attributes() BOOST_NOEXCEPT :
                size( ctx::default_stacksize() ),
                do_unwind( stack_unwind),
                preserve_fpu( true)
            {}

            explicit attributes( std::size_t size_) BOOST_NOEXCEPT :
                size( size_),
                do_unwind( stack_unwind),
                preserve_fpu( true)
            {}

            explicit attributes( flag_unwind_t do_unwind_) BOOST_NOEXCEPT :
                size( ctx::default_stacksize() ),
                do_unwind( do_unwind_),
                preserve_fpu( true)
            {}

            explicit attributes( bool preserve_fpu_) BOOST_NOEXCEPT :
                size( ctx::default_stacksize() ),
                do_unwind( stack_unwind),
                preserve_fpu( preserve_fpu_)
            {}

            explicit attributes(
                    std::size_t size_,
                    flag_unwind_t do_unwind_) BOOST_NOEXCEPT :
                size( size_),
                do_unwind( do_unwind_),
                preserve_fpu( true)
            {}

            explicit attributes(
                    std::size_t size_,
                    bool preserve_fpu_) BOOST_NOEXCEPT :
                size( size_),
                do_unwind( stack_unwind),
                preserve_fpu( preserve_fpu_)
            {}

            explicit attributes(
                    flag_unwind_t do_unwind_,
                    bool preserve_fpu_) BOOST_NOEXCEPT :
                size( ctx::default_stacksize() ),
                do_unwind( do_unwind_),
                preserve_fpu( preserve_fpu_)
            {}
        };

[section Constructor]

        attributes();
        attributes( std::size_t size);
        attributes( flag_unwind_t do_unwind);
        attributes( bool preserve_fpu);
        attributes( std::size_t size, flag_unwind_t do_unwind);
        attributes( std::size_t size, bool preserve_fpu);
        attributes( flag_unwind_t do_unwind, bool preserve_fpu);

[variablelist
[[Effects:] [Parameter `size` determines the stack size; `do_unwind` will
controls stack unwinding and `preserve_fpu` preserves FPU registers.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect] [/ section Class attribute]


[section:this_fiber Namespace this_fiber]

        namespace boost {
        namespace this_fiber {

        fibers::fiber::id get_id();
        void yield();
        void sleep_until( fibers::clock_type::time_point const& sleep_time);
        template< typename Rep, typename Period >
        void sleep_for( chrono::duration< Rep, Period > const& timeout_duration);

        void interruption_point();
        bool interruption_requested() noexcept;
        bool interruption_enabled() noexcept;
        class disable_interruption;
        class restore_interruption;

        }}

[section Non-member function `get_id()`]

         #include <boost/fiber/operations.hpp>

        fiber::id get_id() noexcept;

[variablelist
[[Returns:] [An instance of __fiber_id__ that represents that currently
executing fiber.]]
[[Throws:] [__fiber_resource_error__ if an error occurs.]]
]
[endsect]

[section Non-member function `sleep_until()`]

        #include <boost/fiber/operations.hpp>

        void sleep_until( fibers::clock_type & abs_time);

[variablelist
[[Effects:] [Suspends the current fiber until the time point specified by
`abs_time` has been reached.]]
[[Throws:] [__fiber_interrupted__ if the current fiber is interrupted.]]
[[Notes:] [`sleep_until()` is one of the predefined __interruption_points__.]]
]
[endsect]

[section Non-member function `sleep_for()`]

        #include <boost/fiber/operations.hpp>

        template< class Rep, class Period >
        void sleep_for( chrono::duration< Rep, Period > const& rel_time);

[variablelist
[[Effects:] [Suspends the current fiber until the time point specified by
`abs_time` has been reached.]]
[[Throws:] [Nothing if operations of chrono::duration<Rep, Period> do not throw
exceptions. __fiber_interrupted__ if the current fiber is interrupted.]]
[[Notes:] [`sleep_for()` is one of the predefined __interruption_points__.]]
]
[endsect]

[section Non-member function `yield()`]

        #include <boost/fiber/operations.hpp>

        void yield() noexcept;

[variablelist
[[Effects:] [Gives up the execution control to other fibers to run.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section Non-member function `interruption_point()`]

        #include <boost/fiber/interruption.hpp>
void interruption_point();

[variablelist
[[Effects:] [Check to see if the current fiber has been interrupted.]]
[[Throws:] [__fiber_interrupted__ if __interruption_enabled__ and
__interruption_requested__ both return `true`.]]
]
[endsect]

[section Non-member function `interruption_requested()`]

        #include <boost/fiber/interruption.hpp>

        bool interruption_requested() noexcept;

[variablelist
[[Returns:] [`true` if interruption has been requested for the current fiber,
`false` otherwise.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section Non-member function `interruption_enabled()`]

        #include <boost/fiber/interruption.hpp>

        bool interruption_enabled() noexcept;

[variablelist
[[Returns:] [`true` if interruption has been enabled for the current fiber,
`false` otherwise.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section Class `disable_interruption`]

        #include <boost/fiber/interruption.hpp>

        class disable_interruption
        {
        public:
            disable_interruption() noexcept;
            ~disable_interruption() noexcept;
            disable_interruption(const disable_interruption&) = delete;
            disable_interruption& operator=(const disable_interruption&) = delete;
        };

[section Constructor]

        disable_interruption() noexcept;

[variablelist
[[Effects:] [Stores the current state of __interruption_enabled__ and disables
interruption for the current fiber.]]
[[Postconditions:] [__interruption_enabled__ returns `false` for the current
fiber.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section Destructor]

        ~disable_interruption() noexcept;

[variablelist
[[Preconditions:] [Must be called from the same fiber from which `*this` was
constructed.]]
[[Effects:] [Restores the current state of __interruption_enabled__ for the
current fiber to that prior to the construction of `*this`.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns the
value stored in the constructor of `*this`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect] [/ section Class disable_interruption]


[section Class `restore_interruption`]

        #include <boost/fiber/interruption.hpp>

        class restore_interruption
        {
        public:
            explicit restore_interruption(disable_interruption& disabler) noexcept;
            ~restore_interruption() noexcept;
            restore_interruption(const restore_interruption&) = delete;
            restore_interruption& operator=(const restore_interruption&) = delete;
        };

[section Constructor]

        explicit restore_interruption(disable_interruption& disabler) noexcept;

[variablelist
[[Preconditions:] [Must be called from the same fiber from which `disabler` was
constructed.]]
[[Effects:] [Restores the current state of __interruption_enabled__ for the
current fiber to that prior to the construction of `disabler`.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns the
value stored in the constructor of `disabler`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[section Destructor]

        ~restore_interruption() noexcept;

[variablelist
[[Preconditions:] [Must be called from the same fiber from which `*this` was
constructed.]]
[[Effects:] [Disables interruption for the current fiber.]]
[[Postconditions:] [__interruption_enabled__ for the current fiber returns
`false`.]]
[[Throws:] [Nothing.]]
]
[endsect]

[endsect] [/ section Class restore_interruption]


[endsect] [/ section Namespace this_fiber]


[endsect] [/ section Fiber Management]
