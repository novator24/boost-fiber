[/
          Copyright Oliver Kowalke 2013.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[library Fiber
    [quickbook 1.5]
    [authors [Kowalke, Oliver]]
    [copyright 2013 Oliver Kowalke]
    [purpose C++ Library for cooperativly schedule and synchronize micro-threads]
    [category text]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]


[def __boost_asio__ [*Boost.Asio]]
[def __boost_chrono__ [*Boost.Chrono]]
[def __boost_coroutine__ [*Boost.Coroutine]]
[def __boost_move__ [*Boost.Move]]
[def __boost_fiber__ [*Boost.Fiber]]
[def __boost_thread__ [*Boost.Thread]]

[def __async_result__ ['async-result]]
[def __blocked__ ['blocked]]
[def __interruption_points__ ['interruption-points]]
[def __lockable_concept__ ['lockable concept]]
[def __not_a_fiber__ ['not-a-fiber]]
[def __rendezvous__ ['rendezvous]]

[def __barrier__ `barrier`]
[def __condition__ `condition`]
[def __coro__ ['coroutine]]
[def __disable_interruption__ `disable_interruption`]
[def __enable_interruption__ `enable_interruption`]
[def __fiber_exception__ `fiber_exception`]
[def __fiber__ `fiber`]
[def __fiber_group__ `fiber_group`]
[def __fiber_interrupted__ `fiber_interrupted`]
[def __fiber_resource_error__ `fiber_resource_error`]
[def __fibers__ `fibers`]
[def __future__ `future`]
[def __interruption_point__ `interruption_point`]
[def __invalid_argument__ `std::invalid_argument`]
[def __joinable__ `joinable`]
[def __lock_error__ `lock_error`]
[def __mutex__ `mutex`]
[def __packaged_task__ `packaged-task`]
[def __promise__ `promise`]
[def __recursive_mutex__ `recursive_mutex`]
[def __recursive_timed_mutex__ `recursive_timed_mutex`]
[def __segmented_stack__ ['segemented-stack]]
[def __shared_future__ `shared_future`]
[def __stack_allocator_concept__ ['stack-allocator concept]]
[def __stack_allocator__ ['stack-allocator]]
[def __timed_mutex__ `timed_mutex`]

[def __async__ `async()`]
[def __barrier_wait__ `barrier::wait()`]
[def __cond_wait__ `condition::wait()`]
[def __cond_wait_for__ `condition::wait_for()`]
[def __cond_wait_until__ `condition::wait_until()`]
[def __detach__ `fiber::detach()`]
[def __fiber_id__ `fiber::id`]
[def __fsp__ `fiber_specific_pointer`]
[def __future_get__ `future<>::get()`]
[def __get_id__ `fiber::get_id()`]
[def __interrupt__ `fiber::interrupt()`]
[def __interruption_enabled__ `this_fiber::interruption_enabled()`]
[def __interruption_requested__ `this_fiber::interruption_requested()`]
[def __join__ `fiber::join()`]
[def __shared_future_get__ `shared_future<>::get()`]
[def __sleep_for__ `this_fiber::sleep_for()`]
[def __sleep_until__ `this_fiber::sleep_until()`]
[def __yield_context__ ['boost::asio::yield_context]]
[def __yield_fiber__ ['boost::fibers::asio::yield_context]]
[def __yield__ `this_fiber::yield()`]

[def __lock__ `lock()`]
[def __try_lock_for__ `try_lock_for()`]
[def __try_lock__ `try_lock()`]
[def __try_lock_until__ `try_lock_until()`]
[def __unlock__ `unlock()`]


[include overview.qbk]
[include fiber.qbk]
[include stack.qbk]
[section:synchronization Synchronization]
[include mutexes.qbk]
[include condition_variables.qbk]
[include barrier.qbk]
[include queue.qbk]
[include future.qbk]
[endsect]
[include fls.qbk]
[include asio.qbk]
[include acknowledgements.qbk]
