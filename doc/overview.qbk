[/
          Copyright Oliver Kowalke 2013.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:overview Overview]

__boost_fiber__  provides a framework for micro-/userland-threads (fibers)
scheduled cooperativly.
The API contains classes and functions to manage and synchronize fibers similiar to
__boost_thread__.

A fiber is able to store the current execution state, including all registers
and CPU flags, the instruction pointer, and the stack pointer and later restore
this state.
The idea is to have multiple execution paths running on a single thread using a
sort of cooperative scheduling (threads are preemptively scheduled) - the
running fiber decides explicitly when its yields to allow another fiber to
run (context switching).
A context switch between threads costs usally thousends of CPU cycles on x86
compared to a fiber switch with few hundreds of cycles.
A fiber can only run on a single thread at any point in time.

In order to use the classes and functions described here, you can either include
the specific headers specified by the descriptions of each class or function, or
include the master library header:

    #include <boost/fiber/all.hpp>

which includes all the other headers in turn.

Used namespaces are:

    namespace boost::fibers
    namespace boost::this_fiber


[warning This library is ['not] an official Boost library]

__boost_fiber__ depends uppon __boost_chrono__, __boost_coroutine__ and __boost_move__.
Boost version 1.55.0 is required.


[endsect]
